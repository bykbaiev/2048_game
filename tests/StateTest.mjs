// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Test from "../node_modules/rescript-test/src/Test.mjs";
import * as Tile from "../src/Tile.mjs";
import * as Curry from "../node_modules/rescript/lib/es6/curry.js";
import * as State from "../src/State.mjs";
import * as Caml_obj from "../node_modules/rescript/lib/es6/caml_obj.js";

Test.test("#State.decodeBestScore: should decode best score got from local storage", (function (param) {
        Test.assertion("Missing value", "decodeBestScore", Caml_obj.caml_equal, State.decodeBestScore(undefined), undefined);
        return Test.assertion("Invalid value", "decodeBestScore", Caml_obj.caml_equal, State.decodeBestScore("asdf"), undefined);
      }));

Test.test("#State.decodeGameState: should decode from local storage's JSON string to actual state", (function (param) {
        Test.assertion("Missing state", "decodeGameState", Caml_obj.caml_equal, State.decodeGameState(undefined), undefined);
        Test.assertion("Invalid state", "decodeGameState", Caml_obj.caml_equal, State.decodeGameState(""), undefined);
        Test.assertion("Invalid state (structure)", "decodeGameState", Caml_obj.caml_equal, State.decodeGameState("{\"score\": \"asdf\", \"tiles\": []}"), undefined);
        Test.assertion("Invalid state (structure 2)", "decodeGameState", Caml_obj.caml_equal, State.decodeGameState("{\"status\": \"non-existing\", \"score\": 123, \"tiles\": []}"), undefined);
        Test.assertion("~ Invalid state (tiles are skipped)", "decodeGameState", Caml_obj.caml_equal, State.decodeGameState("{\"status\": \"playing\", \"score\": 123, \"tiles\": [1, 2, 3]}"), {
              TAG: /* Playing */0,
              _0: {
                best: undefined,
                score: 123,
                tiles: /* [] */0
              }
            });
        Test.assertion("Empty tiles (playing)", "decodeGameState", Caml_obj.caml_equal, State.decodeGameState("{\"status\": \"playing\", \"score\": 123, \"tiles\": []}"), {
              TAG: /* Playing */0,
              _0: {
                best: undefined,
                score: 123,
                tiles: /* [] */0
              }
            });
        return Test.assertion("Valid state", "decodeGameState", Caml_obj.caml_equal, State.decodeGameState("{\"status\": \"win\", \"score\": 123, \"tiles\": [{\"status\": \"average\", \"id\": \"tile-123\", \"val\": 4, \"x\": 0, \"y\": 1 }]}"), {
                    TAG: /* Win */1,
                    _0: {
                      best: undefined,
                      score: 123,
                      tiles: {
                        hd: Curry._1(Tile.GameTile.Converters.toAverage, Tile.GameTile.createTile("tile-123", 4, 0, 1)),
                        tl: /* [] */0
                      }
                    }
                  });
      }));

export {
  
}
/*  Not a pure module */
