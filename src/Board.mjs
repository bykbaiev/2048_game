// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Tile from "./Tile.mjs";
import * as Curry from "../node_modules/rescript/lib/es6/curry.js";
import * as State from "./State.mjs";
import * as Utils from "./Utils.mjs";
import * as React from "react";
import * as Recoil from "recoil";
import * as Caml_obj from "../node_modules/rescript/lib/es6/caml_obj.js";
import * as Belt_List from "../node_modules/rescript/lib/es6/belt_List.js";
import * as Constants from "./Constants.mjs";
import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "../node_modules/rescript/lib/es6/belt_Option.js";
import * as BoardModuleCss from "./Board.module.css";

var styles = BoardModuleCss;

var indexes = Belt_Array.makeBy(Utils.gridSize, (function (idx) {
        return idx;
      }));

function getClassName(param) {
  return Utils.getCls(styles, param);
}

var viewList = Belt_Array.map;

function viewGridSizedList(param) {
  return Belt_Array.map(indexes, param);
}

function viewCell(rowId, cellId) {
  return React.createElement("div", {
              key: "" + rowId + "-" + cellId + "-cell",
              className: Utils.getCls(styles, "gridCell")
            });
}

function viewRow(rowId) {
  return React.createElement("div", {
              key: "" + rowId + "-row",
              className: Utils.getCls(styles, "gridRow")
            }, Belt_Array.map(indexes, (function (param) {
                    return viewCell(rowId, param);
                  })));
}

function viewTile(tile) {
  var val = Curry._1(Tile.GameTile.Getters.val, tile);
  var valName = val > Constants.winningValue ? "tileSuper" : "tile-" + val;
  var x = Curry._1(Tile.GameTile.Getters.x, tile);
  var y = Curry._1(Tile.GameTile.Getters.y, tile);
  var posName = "tilePosition-" + (x + 1 | 0).toString() + "-" + (y + 1 | 0).toString();
  var newName = Curry._1(Tile.GameTile.Getters.$$new, tile) ? "tileNew" : "";
  var mergedName = Curry._1(Tile.GameTile.Getters.merged, tile) ? "tileMerged" : "";
  return React.createElement("div", {
              key: Curry._1(Tile.GameTile.Getters.id, tile),
              className: Utils.getCls(styles, "tile") + " " + Utils.getCls(styles, valName) + " " + Utils.getCls(styles, posName) + " " + Utils.getCls(styles, newName) + " " + Utils.getCls(styles, mergedName)
            }, React.createElement("div", {
                  className: Utils.getCls(styles, "tileInner")
                }, val.toString()));
}

function Board(Props) {
  var match = Recoil.useRecoilState(State.gameState);
  var setState = match[1];
  var state = match[0];
  var setHistory = Recoil.useSetRecoilState(State.historyState);
  var tiles = Recoil.useRecoilValue(State.tilesState);
  var isWin = Recoil.useRecoilValue(State.winState);
  var isLoss = Recoil.useRecoilValue(State.lossState);
  var message = Recoil.useRecoilValue(State.messageState);
  React.useEffect((function () {
          document.addEventListener("keydown", (function ($$event) {
                  var dir = Utils.keyCodeToDirection($$event.keyCode);
                  if (dir !== undefined) {
                    return Curry._1(setState, (function (param) {
                                  return Utils.move(dir, param);
                                }));
                  }
                  
                }));
          return (function (param) {
                    document.removeEventListener("keydown");
                    
                  });
        }), []);
  React.useEffect((function () {
          Curry._1(setHistory, (function (history) {
                  var last = Belt_Array.get(history, history.length - 1 | 0);
                  var isSameAsLast = Belt_Option.isSome(last) && Belt_Option.mapWithDefault(Belt_Option.flatMap(last, (function (x) {
                              return State.decodeGameState(JSON.stringify(x));
                            })), false, (function (x) {
                          return Caml_obj.caml_equal(x, state);
                        }));
                  if (isSameAsLast) {
                    return history;
                  }
                  var size = history.length;
                  return Belt_Array.sliceToEnd(Belt_Array.concat(history, [State.encodeHistoricalGameState(state)]), size - 15 | 0);
                }));
          
        }), [state]);
  var continueGame = function (param) {
    return Curry._1(setState, (function (state) {
                  return {
                          TAG: /* PlayingAfterWin */3,
                          _0: State.getInternals(state)
                        };
                }));
  };
  var tryAgain = function (param) {
    Curry._1(setState, (function (param) {
            return State.initialize(undefined);
          }));
    return Curry._1(setHistory, (function (param) {
                  return [];
                }));
  };
  return React.createElement("div", {
              className: Utils.getCls(styles, "root")
            }, isWin || isLoss ? React.createElement("div", {
                    className: Utils.getCls(styles, "gameMessage") + " " + (
                      isWin ? Utils.getCls(styles, "gameWon") : ""
                    )
                  }, React.createElement("p", undefined, Belt_Option.getWithDefault(message, "")), React.createElement("div", {
                        className: Utils.getCls(styles, "lower")
                      }, isWin ? React.createElement("button", {
                              className: Utils.getCls(styles, "gameMessageButton"),
                              onClick: continueGame
                            }, "Keep going") : null, React.createElement("button", {
                            className: Utils.getCls(styles, "gameMessageButton"),
                            onClick: tryAgain
                          }, "Try again"))) : null, React.createElement("div", {
                  className: Utils.getCls(styles, "gridContainer")
                }, Belt_Array.map(indexes, viewRow)), React.createElement("div", {
                  className: Utils.getCls(styles, "tileContainer")
                }, Belt_Array.map(Belt_List.toArray(tiles), viewTile)));
}

var make = Board;

export {
  styles ,
  indexes ,
  getClassName ,
  viewList ,
  viewGridSizedList ,
  viewCell ,
  viewRow ,
  viewTile ,
  make ,
  
}
/* styles Not a pure module */
