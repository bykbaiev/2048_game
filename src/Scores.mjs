// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "../node_modules/rescript/lib/es6/curry.js";
import * as State from "./State.mjs";
import * as Utils from "./Utils.mjs";
import * as React from "react";
import * as Recoil from "recoil";
import * as Belt_Option from "../node_modules/rescript/lib/es6/belt_Option.js";
import * as Caml_option from "../node_modules/rescript/lib/es6/caml_option.js";
import * as ScoresModuleCss from "./Scores.module.css";

var styles = ScoresModuleCss;

function getClassName(param) {
  return Utils.getCls(styles, param);
}

function prepareCounter(x) {
  return String(x);
}

function Scores(Props) {
  var match = React.useState(function () {
        
      });
  var setPrevScore = match[1];
  var prevScore = match[0];
  var match$1 = React.useState(function () {
        
      });
  var setDiff = match$1[1];
  var diff = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setTimeoutId = match$2[1];
  var timeoutId = match$2[0];
  var score = Recoil.useRecoilValue(State.scoreState);
  var best = Recoil.useRecoilValue(State.bestScoreState);
  React.useEffect((function () {
          if (timeoutId !== undefined) {
            clearTimeout(Caml_option.valFromOption(timeoutId));
          }
          Curry._1(setDiff, (function (param) {
                  if (prevScore !== undefined && (score - prevScore | 0) > 0) {
                    Curry._1(setTimeoutId, (function (param) {
                            return Caml_option.some(setTimeout((function (param) {
                                              return Curry._1(setDiff, (function (param) {
                                                            
                                                          }));
                                            }), 600));
                          }));
                    return score - prevScore | 0;
                  }
                  
                }));
          Curry._1(setPrevScore, (function (param) {
                  return score;
                }));
          
        }), [score]);
  return React.createElement("div", {
              className: Utils.getCls(styles, "root")
            }, React.createElement("div", {
                  className: Utils.getCls(styles, "score")
                }, String(score), Belt_Option.isSome(diff) ? React.createElement("div", {
                        className: Utils.getCls(styles, "scoreAddition")
                      }, String(Belt_Option.getWithDefault(diff, 0))) : null), React.createElement("div", {
                  className: Utils.getCls(styles, "best")
                }, String(best)));
}

var make = Scores;

export {
  styles ,
  getClassName ,
  prepareCounter ,
  make ,
  
}
/* styles Not a pure module */
