// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "../node_modules/rescript/lib/es6/js_dict.js";
import * as Js_math from "../node_modules/rescript/lib/es6/js_math.js";
import * as Belt_List from "../node_modules/rescript/lib/es6/belt_List.js";
import * as Caml_int32 from "../node_modules/rescript/lib/es6/caml_int32.js";
import * as Belt_Option from "../node_modules/rescript/lib/es6/belt_Option.js";

function getCls(styles, name) {
  return Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(styles, "default"), (function (defaults) {
                    return Js_dict.get(defaults, name);
                  })), "");
}

function createTile(val, x, y) {
  return {
          val: val,
          pos: {
            x: x,
            y: y
          }
        };
}

function getPair(max, idx) {
  if (idx >= Math.imul(max, max)) {
    return ;
  }
  var y = Caml_int32.mod_(idx, max);
  return [
          Caml_int32.div(idx, max),
          y
        ];
}

function positionFilterPred(tiles, position) {
  var x = position[0];
  if (x === -1 && position[1] === -1) {
    return false;
  }
  var y = position[1];
  return !Belt_List.some(tiles, (function (param) {
                var pos = param.pos;
                if (pos.x === x) {
                  return pos.y === y;
                } else {
                  return false;
                }
              }));
}

function createNewTile(tiles) {
  var allPositions = Belt_List.makeBy(16, (function (param) {
          return getPair(4, param);
        }));
  var availablePositions = Belt_List.keep(Belt_List.map(allPositions, (function (pos) {
              return Belt_Option.getWithDefault(pos, [
                          -1,
                          -1
                        ]);
            })), (function (param) {
          return positionFilterPred(tiles, param);
        }));
  var idx = Js_math.random_int(0, Belt_List.size(availablePositions));
  var match = Belt_Option.getWithDefault(Belt_List.get(availablePositions, idx), [
        0,
        0
      ]);
  return createTile(2, match[0], match[1]);
}

var gridSize = 4;

var winningValue = 2048;

export {
  gridSize ,
  winningValue ,
  getCls ,
  createTile ,
  getPair ,
  positionFilterPred ,
  createNewTile ,
  
}
/* No side effect */
