// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "../node_modules/rescript/lib/es6/curry.js";
import * as Js_dict from "../node_modules/rescript/lib/es6/js_dict.js";
import * as Js_json from "../node_modules/rescript/lib/es6/js_json.js";
import * as Js_math from "../node_modules/rescript/lib/es6/js_math.js";
import * as Belt_List from "../node_modules/rescript/lib/es6/belt_List.js";
import * as Constants from "./Constants.mjs";
import * as Caml_int32 from "../node_modules/rescript/lib/es6/caml_int32.js";
import * as Belt_Option from "../node_modules/rescript/lib/es6/belt_Option.js";

function createTile(id, val, x, y) {
  return {
          TAG: /* NewTile */0,
          _0: {
            id: id,
            val: val,
            pos: {
              x: x,
              y: y
            }
          }
        };
}

function status(tile) {
  switch (tile.TAG | 0) {
    case /* NewTile */0 :
        return "new";
    case /* MergedTile */1 :
        return "merged";
    case /* AverageTile */2 :
        return "average";
    
  }
}

function id(tile) {
  return tile._0.id;
}

function val(tile) {
  return tile._0.val;
}

function x(tile) {
  return tile._0.pos.x;
}

function y(tile) {
  return tile._0.pos.y;
}

function $$new(tile) {
  switch (tile.TAG | 0) {
    case /* NewTile */0 :
        return true;
    case /* MergedTile */1 :
    case /* AverageTile */2 :
        return false;
    
  }
}

function merged(tile) {
  switch (tile.TAG | 0) {
    case /* MergedTile */1 :
        return true;
    case /* NewTile */0 :
    case /* AverageTile */2 :
        return false;
    
  }
}

function updateInternals(fn, tile) {
  switch (tile.TAG | 0) {
    case /* NewTile */0 :
        return {
                TAG: /* NewTile */0,
                _0: Curry._1(fn, tile._0)
              };
    case /* MergedTile */1 :
        return {
                TAG: /* MergedTile */1,
                _0: Curry._1(fn, tile._0)
              };
    case /* AverageTile */2 :
        return {
                TAG: /* AverageTile */2,
                _0: Curry._1(fn, tile._0)
              };
    
  }
}

function id$1(tile, id$2) {
  return updateInternals((function (internals) {
                return {
                        id: id$2,
                        val: internals.val,
                        pos: internals.pos
                      };
              }), tile);
}

function x$1(tile, x$2) {
  return updateInternals((function (internals) {
                var init = internals.pos;
                return {
                        id: internals.id,
                        val: internals.val,
                        pos: {
                          x: x$2,
                          y: init.y
                        }
                      };
              }), tile);
}

function y$1(tile, y$2) {
  return updateInternals((function (internals) {
                var init = internals.pos;
                return {
                        id: internals.id,
                        val: internals.val,
                        pos: {
                          x: init.x,
                          y: y$2
                        }
                      };
              }), tile);
}

function val$1(tile, val$2) {
  return updateInternals((function (internals) {
                return {
                        id: internals.id,
                        val: val$2,
                        pos: internals.pos
                      };
              }), tile);
}

var Setters = {
  id: id$1,
  x: x$1,
  y: y$1,
  val: val$1
};

function toNew(tile) {
  switch (tile.TAG | 0) {
    case /* NewTile */0 :
        return tile;
    case /* MergedTile */1 :
    case /* AverageTile */2 :
        return {
                TAG: /* NewTile */0,
                _0: tile._0
              };
    
  }
}

function toMerged(tile) {
  switch (tile.TAG | 0) {
    case /* MergedTile */1 :
        return tile;
    case /* NewTile */0 :
    case /* AverageTile */2 :
        return {
                TAG: /* MergedTile */1,
                _0: tile._0
              };
    
  }
}

function toAverage(tile) {
  switch (tile.TAG | 0) {
    case /* NewTile */0 :
    case /* MergedTile */1 :
        return {
                TAG: /* AverageTile */2,
                _0: tile._0
              };
    case /* AverageTile */2 :
        return tile;
    
  }
}

var Converters = {
  toNew: toNew,
  toMerged: toMerged,
  toAverage: toAverage
};

function positionFilterPred(tiles, position) {
  var x = position[0];
  if (x === -1 && position[1] === -1) {
    return false;
  }
  var y = position[1];
  return !Belt_List.some(tiles, (function (tile) {
                if (tile._0.pos.x === x) {
                  return tile._0.pos.y === y;
                } else {
                  return false;
                }
              }));
}

function getPair(max, idx) {
  if (idx >= Math.imul(max, max)) {
    return ;
  }
  var y = Caml_int32.mod_(idx, max);
  return [
          Caml_int32.div(idx, max),
          y
        ];
}

function createNewTile(tiles) {
  var allPositions = Belt_List.makeBy(16, (function (param) {
          return getPair(4, param);
        }));
  var availablePositions = Belt_List.keep(Belt_List.map(allPositions, (function (pos) {
              return Belt_Option.getWithDefault(pos, [
                          -1,
                          -1
                        ]);
            })), (function (param) {
          return positionFilterPred(tiles, param);
        }));
  var idx = Js_math.random_int(0, Belt_List.size(availablePositions));
  var match = Belt_Option.getWithDefault(Belt_List.get(availablePositions, idx), [
        0,
        0
      ]);
  var randTileIndicator = Js_math.random_int(0, 4);
  var id = "tile-" + String(Math.random());
  return createTile(id, randTileIndicator === 3 ? 4 : 2, match[0], match[1]);
}

function isWinningValue(tile) {
  return tile._0.val === Constants.winningValue;
}

function encode(tile) {
  var dict = {};
  dict["status"] = status(tile);
  dict["id"] = tile._0.id;
  dict["val"] = tile._0.val;
  dict["x"] = tile._0.pos.x;
  dict["y"] = tile._0.pos.y;
  return dict;
}

function encodeHistorical(tile) {
  return [
          tile._0.id,
          String(tile._0.val),
          String(tile._0.pos.x),
          String(tile._0.pos.y)
        ];
}

function decode(tile) {
  var value = Js_json.classify(tile);
  if (typeof value === "number") {
    return ;
  }
  if (value.TAG !== /* JSONObject */2) {
    return ;
  }
  var value$1 = value._0;
  var status = Belt_Option.flatMap(Js_dict.get(value$1, "status"), Js_json.decodeString);
  var id = Belt_Option.flatMap(Js_dict.get(value$1, "id"), Js_json.decodeString);
  var val = Belt_Option.map(Belt_Option.flatMap(Js_dict.get(value$1, "val"), Js_json.decodeNumber), Js_math.ceil_int);
  var x = Belt_Option.map(Belt_Option.flatMap(Js_dict.get(value$1, "x"), Js_json.decodeNumber), Js_math.ceil_int);
  var y = Belt_Option.map(Belt_Option.flatMap(Js_dict.get(value$1, "y"), Js_json.decodeNumber), Js_math.ceil_int);
  var pos = x !== undefined && y !== undefined ? ({
        x: x,
        y: y
      }) : undefined;
  var internals = id !== undefined && val !== undefined && pos !== undefined ? ({
        id: id,
        val: val,
        pos: pos
      }) : undefined;
  if (status === undefined) {
    return ;
  }
  switch (status) {
    case "average" :
        if (internals !== undefined) {
          return {
                  TAG: /* AverageTile */2,
                  _0: internals
                };
        } else {
          return ;
        }
    case "merged" :
        if (internals !== undefined) {
          return {
                  TAG: /* MergedTile */1,
                  _0: internals
                };
        } else {
          return ;
        }
    case "new" :
        if (internals !== undefined) {
          return {
                  TAG: /* NewTile */0,
                  _0: internals
                };
        } else {
          return ;
        }
    default:
      return ;
  }
}

function decodeHistorical(tile) {
  var value = Js_json.classify(tile);
  if (typeof value === "number") {
    return ;
  }
  if (value.TAG !== /* JSONArray */3) {
    return ;
  }
  var value$1 = value._0;
  if (value$1.length !== 4) {
    return ;
  }
  var id = value$1[0];
  var val = value$1[1];
  var x = value$1[2];
  var y = value$1[3];
  var id$1 = Js_json.decodeString(id);
  var val$1 = Belt_Option.map(Js_json.decodeNumber(val), Js_math.ceil_int);
  var x$1 = Belt_Option.map(Js_json.decodeNumber(x), Js_math.ceil_int);
  var y$1 = Belt_Option.map(Js_json.decodeNumber(y), Js_math.ceil_int);
  var pos = x$1 !== undefined && y$1 !== undefined ? ({
        x: x$1,
        y: y$1
      }) : undefined;
  if (id$1 !== undefined && val$1 !== undefined && pos !== undefined) {
    return {
            TAG: /* AverageTile */2,
            _0: {
              id: id$1,
              val: val$1,
              pos: pos
            }
          };
  }
  
}

var GameTile_Getters = {
  x: x,
  y: y,
  id: id,
  val: val,
  $$new: $$new,
  merged: merged
};

var GameTile = {
  Getters: GameTile_Getters,
  Setters: Setters,
  Converters: Converters,
  createTile: createTile,
  createNewTile: createNewTile,
  isWinningValue: isWinningValue,
  encode: encode,
  encodeHistorical: encodeHistorical,
  decode: decode,
  decodeHistorical: decodeHistorical,
  getPair: getPair,
  positionFilterPred: positionFilterPred
};

export {
  GameTile ,
  
}
/* No side effect */
