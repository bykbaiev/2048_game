// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_math from "../node_modules/rescript/lib/es6/js_math.js";
import * as Belt_List from "../node_modules/rescript/lib/es6/belt_List.js";
import * as Constants from "./Constants.mjs";
import * as Caml_int32 from "../node_modules/rescript/lib/es6/caml_int32.js";
import * as Belt_Option from "../node_modules/rescript/lib/es6/belt_Option.js";

function createTile(id, val, x, y) {
  return {
          id: id,
          val: val,
          pos: {
            x: x,
            y: y
          },
          new: true,
          merged: false
        };
}

function id(tile) {
  return tile.id;
}

function val(tile) {
  return tile.val;
}

function x(tile) {
  return tile.pos.x;
}

function y(tile) {
  return tile.pos.y;
}

function $$new(tile) {
  return tile.new;
}

function merged(tile) {
  return tile.merged;
}

function id$1(tile, id$2) {
  return {
          id: id$2,
          val: tile.val,
          pos: tile.pos,
          new: tile.new,
          merged: tile.merged
        };
}

function x$1(tile, x$2) {
  var init = tile.pos;
  return {
          id: tile.id,
          val: tile.val,
          pos: {
            x: x$2,
            y: init.y
          },
          new: tile.new,
          merged: tile.merged
        };
}

function y$1(tile, y$2) {
  var init = tile.pos;
  return {
          id: tile.id,
          val: tile.val,
          pos: {
            x: init.x,
            y: y$2
          },
          new: tile.new,
          merged: tile.merged
        };
}

function val$1(tile, val$2) {
  return {
          id: tile.id,
          val: val$2,
          pos: tile.pos,
          new: tile.new,
          merged: tile.merged
        };
}

function $$new$1(tile, $$new$2) {
  return {
          id: tile.id,
          val: tile.val,
          pos: tile.pos,
          new: $$new$2,
          merged: tile.merged
        };
}

function merged$1(tile, merged$2) {
  return {
          id: tile.id,
          val: tile.val,
          pos: tile.pos,
          new: tile.new,
          merged: merged$2
        };
}

var Setters = {
  id: id$1,
  x: x$1,
  y: y$1,
  val: val$1,
  $$new: $$new$1,
  merged: merged$1
};

function positionFilterPred(tiles, position) {
  var x = position[0];
  if (x === -1 && position[1] === -1) {
    return false;
  }
  var y = position[1];
  return !Belt_List.some(tiles, (function (param) {
                var pos = param.pos;
                if (pos.x === x) {
                  return pos.y === y;
                } else {
                  return false;
                }
              }));
}

function getPair(max, idx) {
  if (idx >= Math.imul(max, max)) {
    return ;
  }
  var y = Caml_int32.mod_(idx, max);
  return [
          Caml_int32.div(idx, max),
          y
        ];
}

function createNewTile(tiles) {
  var allPositions = Belt_List.makeBy(16, (function (param) {
          return getPair(4, param);
        }));
  var availablePositions = Belt_List.keep(Belt_List.map(allPositions, (function (pos) {
              return Belt_Option.getWithDefault(pos, [
                          -1,
                          -1
                        ]);
            })), (function (param) {
          return positionFilterPred(tiles, param);
        }));
  var idx = Js_math.random_int(0, Belt_List.size(availablePositions));
  var match = Belt_Option.getWithDefault(Belt_List.get(availablePositions, idx), [
        0,
        0
      ]);
  var randTileIndicator = Js_math.random_int(0, 4);
  var id = "tile-" + String(Math.random());
  return createTile(id, randTileIndicator === 3 ? 4 : 2, match[0], match[1]);
}

function isWinningValue(tile) {
  return tile.val === Constants.winningValue;
}

var GameTile_Getters = {
  x: x,
  y: y,
  id: id,
  val: val,
  $$new: $$new,
  merged: merged
};

var GameTile = {
  Getters: GameTile_Getters,
  Setters: Setters,
  createTile: createTile,
  createNewTile: createNewTile,
  isWinningValue: isWinningValue,
  getPair: getPair,
  positionFilterPred: positionFilterPred
};

export {
  GameTile ,
  
}
/* No side effect */
